// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250809120503_IntitalCreate")]
    partial class IntitalCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Domain.Entities.AttendanceUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("OTPCodeID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("VoteSessionId")
                        .HasColumnType("int");

                    b.Property<int?>("VoteSessionId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CreatedByAdminId");

                    b.HasIndex("OTPCodeID")
                        .IsUnique()
                        .HasFilter("[OTPCodeID] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("VoteSessionId");

                    b.HasIndex("VoteSessionId1");

                    b.ToTable("AttendanceUsers");
                });

            modelBuilder.Entity("Domain.Entities.OTPCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("OTPCodes");
                });

            modelBuilder.Entity("Domain.Entities.SystemLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemLogs");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedByAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByAdminId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("VoteQuestionOptionId")
                        .HasColumnType("int");

                    b.Property<int?>("VoteQuestionOptionId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("VotedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("VoteQuestionOptionId");

                    b.HasIndex("VoteQuestionOptionId1");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Domain.Entities.VoteQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoteSessionId")
                        .HasColumnType("int");

                    b.Property<int?>("VoteSessionId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VoteSessionId");

                    b.HasIndex("VoteSessionId1");

                    b.ToTable("VoteQuestions");
                });

            modelBuilder.Entity("Domain.Entities.VoteQuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoteQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("VoteQuestionId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VoteQuestionId");

                    b.HasIndex("VoteQuestionId1");

                    b.ToTable("VoteQuestionOptions");
                });

            modelBuilder.Entity("Domain.Entities.VoteSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TopicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoteSessionStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VoteSessions");
                });

            modelBuilder.Entity("Domain.Entities.AttendanceUser", b =>
                {
                    b.HasOne("Domain.Entities.Admin", null)
                        .WithMany("CreatedAttendanceUsersByAdmin")
                        .HasForeignKey("AdminId");

                    b.HasOne("Domain.Entities.Admin", "CreatedByAdmin")
                        .WithMany()
                        .HasForeignKey("CreatedByAdminId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OTPCode", "OTPCode")
                        .WithOne("AttendanceUser")
                        .HasForeignKey("Domain.Entities.AttendanceUser", "OTPCodeID");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("AttendanceUsers")
                        .HasForeignKey("UserId1");

                    b.HasOne("Domain.Entities.VoteSession", "VoteSession")
                        .WithMany()
                        .HasForeignKey("VoteSessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VoteSession", null)
                        .WithMany("AttendanceUsers")
                        .HasForeignKey("VoteSessionId1");

                    b.Navigation("CreatedByAdmin");

                    b.Navigation("OTPCode");

                    b.Navigation("User");

                    b.Navigation("VoteSession");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Admin", "CreatedByAdmin")
                        .WithMany("CreatedUsersByAdmin")
                        .HasForeignKey("CreatedByAdminId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByAdmin");
                });

            modelBuilder.Entity("Domain.Entities.Vote", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("Votes")
                        .HasForeignKey("UserId1");

                    b.HasOne("Domain.Entities.VoteQuestionOption", "VoteQuestionOption")
                        .WithMany()
                        .HasForeignKey("VoteQuestionOptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VoteQuestionOption", null)
                        .WithMany("Votes")
                        .HasForeignKey("VoteQuestionOptionId1");

                    b.Navigation("User");

                    b.Navigation("VoteQuestionOption");
                });

            modelBuilder.Entity("Domain.Entities.VoteQuestion", b =>
                {
                    b.HasOne("Domain.Entities.VoteSession", "VoteSession")
                        .WithMany()
                        .HasForeignKey("VoteSessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VoteSession", null)
                        .WithMany("Questions")
                        .HasForeignKey("VoteSessionId1");

                    b.Navigation("VoteSession");
                });

            modelBuilder.Entity("Domain.Entities.VoteQuestionOption", b =>
                {
                    b.HasOne("Domain.Entities.VoteQuestion", "VoteQuestion")
                        .WithMany()
                        .HasForeignKey("VoteQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VoteQuestion", null)
                        .WithMany("Options")
                        .HasForeignKey("VoteQuestionId1");

                    b.Navigation("VoteQuestion");
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Navigation("CreatedAttendanceUsersByAdmin");

                    b.Navigation("CreatedUsersByAdmin");
                });

            modelBuilder.Entity("Domain.Entities.OTPCode", b =>
                {
                    b.Navigation("AttendanceUser")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("AttendanceUsers");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Domain.Entities.VoteQuestion", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Domain.Entities.VoteQuestionOption", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Domain.Entities.VoteSession", b =>
                {
                    b.Navigation("AttendanceUsers");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
